import json
import argparse
import os.path as path


def parse(filename):
    with open(filename) as results_file:
        results = results_file.read()
        results = results.replace('let results = ', '')
        results = results.replace(';', '')

        results_json = json.loads(results)

        stats = results_json['stats']

        print("Top systemd services")
        print("-----------------------")
        for service in sorted(stats['services'], key=lambda k: k['frequency'], reverse=True):
            print(f"{service['serviceName']}: {service['frequency']}")

        print("")
        print("Top processes")
        print("-----------------------")
        for process in sorted(stats['processes'], key=lambda k: k['frequency'], reverse=True):
            print(f"{process['process']}: {process['frequency']}")

        print("")
        print("Processes per group")
        print("-----------------------")

        groups = []

        for group in results_json['groups']:
            processes_in_group = results_json['processes']
            tmp = [x for x in processes_in_group if x['group'] == group['id']]

            g = {}
            g['name'] = group['content']
            g['frequency'] = len(tmp)

            groups.append(g)

        for group in sorted(groups, key=lambda k: k['frequency'], reverse=True):
            print(f"{group['name']}: {group['frequency']}")


def main():
    parser = argparse.ArgumentParser(prog='ProcessMonitor results parser',
                                     description='Tool to quickly parse the results from ProcessMonitor without needing to load the timeline')
    parser.add_argument('filename', help="Path to the results file generated by ProcessMonitor")
    args = parser.parse_args()

    if not path.isfile(args.filename):
        print(f"Cannot find file {args.filename}")
        return

    parse(args.filename)


if __name__ == "__main__":
    main()
